// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String?
  role      String   @default("USER") // "USER" | "ADMIN"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  image       String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  products    Product[]
  subcategories Subcategory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subcategory {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id                  String      @id @default(uuid())
  userId              String
  user                User        @relation(fields: [userId], references: [id])
  status              String      @default("PENDING") // "PENDING" | "APPROVED" | "SHIPPING" | "DELIVERED" | "CANCELLED"
  total               Float
  items               OrderItem[]
  expectedDeliveryTime DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
} 